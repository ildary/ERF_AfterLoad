
#Область Основное
	
&НаКлиенте
Процедура СделатьВсе(Команда)
	
	Попытка
		Настройки();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: Настройки(): " + ОписаниеОшибки() );
	КонецПопытки;
	
	Попытка
		СоздатьГруппыПользователей( 0 );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: СоздатьГруппыПользователей(): " + ОписаниеОшибки() );
	КонецПопытки;
	
	Попытка
		СоздатьГруппыСкладов( 0 );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: СоздатьГруппыСкладов(): " + ОписаниеОшибки() );
	КонецПопытки;
	
	Попытка
		ЗаполнитьСтраны( 0 );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: ЗаполнитьСтраны(): " + ОписаниеОшибки() );
	КонецПопытки;

	Попытка
		ВерсииЧтение( 0 );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: ВерсииЧтение(): " + ОписаниеОшибки() );
	КонецПопытки;

	Попытка
		ЧтениеЕдИзм( 0 );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: ЧтениеЕдИзм(): " + ОписаниеОшибки() );
	КонецПопытки;
	
	Попытка
		ЕдИзмЗаполнитьКоэффициент( 0 );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: ЕдИзмЗаполнитьКоэффициент(): " + ОписаниеОшибки() );
	КонецПопытки;
	
	Попытка
		УдалитьДопЗначения( 0 );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: УдалитьДопЗначения(): " + ОписаниеОшибки() );
	КонецПопытки;
	
	Попытка
		УдалитьПустыеГруппыТоваров( 0 );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: УдалитьПустыеГруппыТоваров(): " + ОписаниеОшибки() );
	КонецПопытки;
	
	Попытка
		УдалитьФизЛица( 0 );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: УдалитьФизЛица(): " + ОписаниеОшибки() );
	КонецПопытки;
	
	Попытка
		ЗаполнитьСправочники( 0 );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: ЗаполнитьСправочники(): " + ОписаниеОшибки() );
	КонецПопытки;
	
	Попытка
		ПеренумерацияСправочников( 0 );
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Ошибка при выполнении: ПеренумерацияСправочников(): " + ОписаниеОшибки() );
	КонецПопытки;

	//интерактивное создание услуги, а её поля будут заполнены позднее, в ЗаполнитьПоляУслугиНаСервере	
//ВЗЯТО из ОбщаяФорма.ФормаНастройкиОрганизации для создания услуги
	Ключ = ПолучитьПредустановленныеВидыНоменклатуры(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"),НСтр("ru = 'Услуга'"));
	ОткрытьФорму("Справочник.ВидыНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", Ключ),,,,, Новый ОписаниеОповещения( "ЗаполнитьПоляУслуги", ЭтотОбъект ) );
	
	//ЗавершитьРаботуСистемы( Ложь, Истина ); // перезапуск интерфейса
	
КонецПроцедуры



Процедура НастройкиНаСервере()
	
	ОбщегоНазначенияУТ.УстановитьРежимКомандногоИнтерфейса( "ИнтерфейсВерсии82" );
	
#Область Администрирование

// Общие

	//Константы.ЗаголовокСистемы.Установить( "Торговля Цветофор" );
	
	Константы.ИспользоватьВерсионированиеОбъектов.Установить( Истина );
	Константы.ИспользоватьПолнотекстовыйПоиск.Установить( Ложь );
	
// Настройки пользователей и прав

	Константы.ИспользоватьГруппыПользователей.Установить( Истина );
	Константы.ИспользоватьДатыЗапретаИзменения.Установить( Истина );
	
//Интернет поддержка
	
	Константы.ИсточникДанныхАдресногоКлассификатора.Установить( "Сервис1С" );

	ОбработкаНовостейВызовСервера.ИнтернетПоддержкаИСервисы_ВключитьРаботуСНовостямиПриИзменении( Ложь );
	ОбновитьПовторноИспользуемыеЗначения();
	
	Константы.ИспользоватьОнлайнПоддержку.Установить( Ложь );
	
	Константы.ИспользоватьСервисСклоненияMorpher.Установить( Истина );
	
// Органайзер //2Do!
	
// Настройка работы с файлами
	
	Константы.ХранитьФайлыВТомахНаДиске.Установить( Истина ); //вторую галку надо вручную включать
	
// Печатные формы, отчеты и обработки
	
	Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить( Истина );
	
// РМК и оборудование
	
	Константы.ИспользоватьПодключаемоеОборудование.Установить( Истина );
	
#КонецОбласти
	
#Область НастройкаНСИИРазделов
	
//Предприятие

	Константы.ИспользоватьПодразделения.Установить( Ложь );
	Константы.ИспользоватьНесколькоВалют.Установить( Ложь );
	
// Номенклатура

	Константы.ИспользоватьНесколькоВидовНоменклатуры.Установить( Ложь );
	
	Константы.ИспользоватьХарактеристикиНоменклатуры.Установить( Истина );
	Константы.ИспользоватьКачествоТоваров.Установить( Истина );
	
	Константы.ИспользоватьСегментыНоменклатуры.Установить( Истина );
	
	//ИспользоватьЕдиницыИзмеренияДляОтчетов
	//ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров
	//ИспользоватьАвтоматическоеЗакрытиеСтрокЗаказовМерныхТоваров
	
	Константы.ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения.Установить( Ложь );
	
	//Константы.ИспользоватьНоменклатуруПоставщиков.Установить( Истина );
	
//CRM и Маркетинг
	
// CRM
	
	Константы.ИспользоватьПартнеровИКонтрагентов.Установить( Ложь	); // потому что уже установлена
	Константы.ИспользоватьПартнеровИКонтрагентов.Установить( Истина );
	
	Константы.ФиксироватьПретензииКлиентов.Установить( Истина );
	
	Константы.ИспользоватьБизнесРегионы.Установить( Истина );
	
#Область ГеоСхемаДляБизнесРегионы
	
	Название	   = "Регионы России и города";
	НазваниеМакета = "ГеографическаяСхемаРоссияРегионыИВсеГорода";
	
	МакетГеоСхемы = ПолучитьОбщийМакет(НазваниеМакета);
	ГеоСхема = Новый ГеографическаяСхема;
	ГеоСхема.Вывести(МакетГеоСхемы);
	СтруктураХраненияСхемы = Новый Структура("Название, ГеоСхема");
	СтруктураХраненияСхемы.Вставить("Название", Название);
	СтруктураХраненияСхемы.Вставить("ГеоСхема", ГеоСхема);
	Константы.ГеографическаяСхемаДляОтчетов.Установить(Новый ХранилищеЗначения(СтруктураХраненияСхемы));
	
#КонецОбласти
	
	Константы.ИспользоватьСделкиСКлиентами.Установить( Ложь );
	
	Константы.ИспользоватьСегментыПартнеров.Установить( Истина );
	
//Маркетинг	

	Константы.ИспользоватьЦеновыеГруппы.Установить( Истина );
	
	Константы.ИспользоватьРучныеСкидкиВПродажах.Установить( Истина );
	
	Константы.ИспользоватьКартыЛояльности.Установить( Истина );
	Константы.ИспользоватьБонусныеПрограммыЛояльности.Установить( Истина );
	
	Константы.ИспользоватьТоварныеКатегории.Установить( Истина ); //Бренды
	
//Продажи

	Константы.ИспользоватьДоговорыСКлиентами.Установить( Ложь );
	Константы.ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов.Установить( Истина );
	
	Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Установить( Истина );
	Константы.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента.Установить(Истина);
	Константы.ИспользоватьСчетаНаОплатуКлиентам.Установить( Истина );
	
	Константы.ИспользоватьЗапретОтгрузки.Установить( Истина );
	
	
	
	Константы.ИспользоватьРозничныеПродажи.Установить( Истина );
	Константы.НазначатьСкидкиПоКнопкеРасчетВЧекеККМ.Установить( Истина );
	//ИспользоватьПодарочныеСертификаты
	
	//онлайн-кассы
	
	//Константы.ВедетсяРаботаЧерезТорговыхПредставителей.Установить( Истина );
	
//Закупки
	
	Константы.ИспользоватьСоглашенияСПоставщиками.Установить( Истина );
	Константы.ИспользоватьДоговорыСПоставщиками.Установить( Ложь );
	
	Константы.ИспользоватьПричиныОтменыЗаказовПоставщикам.Установить( Ложь );
	
//Склад и доставка
	
	Константы.ИспользоватьЗаказыНаПеремещение.Установить( Истина );
	
	Константы.ИспользоватьСтатусыПеремещенийТоваров.Установить( Истина );
	
	Константы.ИспользоватьВнутреннееПотребление.Установить( Истина );
	
	Константы.ИспользоватьРасширенноеОбеспечениеПотребностей.Установить( Истина ); //без него резерва на складе нет
	
	
	//ИспользоватьСборкуРазборку
	
//Казначейство //2DO!
	
//Фин результат и контроллинг
	
	Константы.ФормироватьУправленческийБаланс .Установить( Ложь );
	
	Константы.ИспользоватьПередачиТоваровМеждуОрганизациями.Установить( Истина );
	
	Константы.РассчитыватьПредварительнуюСтоимостьРегламентнымЗаданием.Установить( Истина ); //надеюсь я не пожалею об этом...
	
	Константы.УчитыватьСебестоимостьТоваровПоВидамЗапасов.Установить( Ложь ); //пока не понял для чего это
	
	Константы.ИспользоватьМониторингЦелевыхПоказателей.Установить( Истина );
	
	//автоматические расчеты не включались в АРГО, решил пока не будить лихо...
	
	
#КонецОбласти

#Область НастройкаИнтеграции
	
	ОбменДаннымиСервер.УстановитьПрефиксИнформационнойБазы( "Р" );
	
	Константы.ИспользоватьОбменСБанками.Установить( Истина );
	
#КонецОбласти

	//ДатаЗаписи = Дата( 2018, 1, 1, 0, 0, 0 );
	//
	//МенеджерЗаписи = РегистрыСведений.КонстантыДобавленный.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.Период = ДатаЗаписи;
	//МенеджерЗаписи.Наименование = "ОсновнойСклад";
	//МенеджерЗаписи.Значение		= "Основной склад";
	//МенеджерЗаписи.Записать();
	//
	//МенеджерЗаписи = РегистрыСведений.КонстантыДобавленный.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.Период = ДатаЗаписи;
	//МенеджерЗаписи.Наименование = "ПриходоватьНаПолучательДатаНачала";
	//МенеджерЗаписи.Значение		= "20180101";
	//МенеджерЗаписи.Записать();
	//
	//МенеджерЗаписи = РегистрыСведений.КонстантыДобавленный.СоздатьМенеджерЗаписи();
	//МенеджерЗаписи.Период = ДатаЗаписи;
	//МенеджерЗаписи.Наименование = "ПриходоватьНаПолучательСклады";
	//МенеджерЗаписи.Значение		= "Магазин Цветофор";
	//МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки()
	
	НастройкиНаСервере();
	
	НастройкиОбновления = ГлобальныеНастройкиОбновления(); //отключение обновления
	НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = Ложь;
	ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьНастройкиОбновления(НастройкиОбновления);
	
	СПАРКРискиВызовСервера.ИнтернетПоддержкаИСервисы_ИспользоватьСервисСПАРКРискиПриИзменении( Ложь ); //отключение СПАРК
	ОбновитьПовторноИспользуемыеЗначения();
	
	
	ОткрытьФорму( "Справочник.ВидыНоменклатуры.Форма.ФормаСписка"	   ,, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
	ОткрытьФорму( "Справочник.ТомаХраненияФайлов.ФормаСписка"		   ,, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
	ОткрытьФорму( "Справочник.НастройкиОбменСБанками.Форма.ФормаСписка",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
	
	ОткрытьФорму( "Обработка.ПанельАдминистрированияБСП.Форма.ИнтернетПоддержкаИСервисы"		   ,, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
	ОткрытьФорму( "Обработка.ПанельАдминистрированияБСП.Форма.НастройкиРаботыСФайлами"			   ,, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
	ОткрытьФорму( "РегистрСведений.ДатыЗапретаИзменения.Форма.ДатыЗапретаИзменения"			   ,, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры



&НаКлиенте
Процедура ЗаполнитьСправочники(Команда)
	
	ЗаполнитьСправочникиНаСервере();
	
	ЗагрузитьСправочникиНаСервере( ИмяФайлаВыгрузки() );
//ОткрытьФорму( "Справочник.Производители.ФормаСписка",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
//ОткрытьФорму( "Справочник.Марки.ФормаСписка",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
	
	ЗаполнитьПоляТоваровНаСервере( ИмяФайлаВыгрузки() );
	
КонецПроцедуры

Процедура ЗаполнитьСправочникиНаСервере()
	
	ВидНомрыТовар = Справочники.ВидыНоменклатуры.НайтиПоНаименованию( "Товар (пр. ТМЦ)", Истина ); //ПскНаим
	Если Не ЗначениеЗаполнено( ВидНомрыТовар ) Тогда
		ВидНомрыТовар = Справочники.ВидыНоменклатуры.НайтиПоНаименованию( "Товар", Истина ); //ПскНаим
	КонецЕсли;
	Если    ЗначениеЗаполнено( ВидНомрыТовар ) Тогда //заполним поля
		
		ВидНомрыТовар = ВидНомрыТовар.ПолучитьОбъект();
		
		ВидНомрыТовар.Наименование = "Товар";
		ВидНомрыТовар.СтавкаНДС	   = Перечисления.СтавкиНДС.НДС18;
		ВидНомрыТовар.ЗапретРедактированияНаименованияДляПечатиНоменклатуры = Истина;
		
		ВидНомрыТовар.ШаблонНаименованияДляПечатиНоменклатуры = "Врег( Лев( [Наименование], 1 ) ) + Прав( [Наименование], СтрДлина( [Наименование] ) - 1 )";
		ВидНомрыТовар.ШаблонРабочегоНаименованияНоменклатуры  = "Врег( Лев( [Наименование], 1 ) ) + Прав( [Наименование], СтрДлина( [Наименование] ) - 1 )";
		
		ВидНомрыТовар.Записать();
		
	КонецЕсли;
	
#Область СкладыИВидыЦен

	ВидЦенЗакуп = Справочники.ВидыЦен.НайтиПоНаименованию( "Закупочная", Истина ); //ПскНаим
	ВидЦенРозн  = Справочники.ВидыЦен.НайтиПоНаименованию( "Розничная" , Истина ); //ПскНаим
	
	Склад = Справочники.Склады.НайтиПоНаименованию( "Магазин Розничный", Истина ); //ПскНаим
	Если Не ЗначениеЗаполнено( Склад ) Тогда
		Склад = Справочники.Склады.НайтиПоНаименованию( "Магазин", Истина ); //ПскНаим
	КонецЕсли;
	Склад = Склад.ПолучитьОбъект();
	
	Склад.УчетныйВидЦены   = ВидЦенЗакуп;
	Склад.РозничныйВидЦены = ВидЦенРозн;
	Склад.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен;
	Склад.Записать();
	СкладРозн = Склад.Ссылка;
	
	
	лТекст = "
		|ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.ЭтоГруппа = ЛОЖЬ
		|	И Склады.Родитель <> &Ссылка
		|";

	лЗапрос = Новый Запрос(лТекст);
	лЗапрос.УстановитьПараметр("Ссылка", СкладРозн);
	
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		Склад = лВыборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств( Склад, СкладРозн, "УчетныйВидЦены,ИсточникИнформацииОЦенахДляПечати" );
		Склад.Записать();
		
	КонецЦикла;
	
	Склад = Справочники.Склады.НайтиПоНаименованию( "Магазин Цветофор", Истина ); //ПскНаим
	Склад = Склад.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств( Склад, СкладРозн, "ТипСклада,РозничныйВидЦены" );
	Склад.Записать();
	
	Склад = Справочники.Склады.НайтиПоНаименованию( "Основной склад", Истина ); //ПскНаим
	Склад = Склад.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств( Склад, СкладРозн, "УчетныйВидЦены,ИсточникИнформацииОЦенахДляПечати" );
	Склад.Записать();
	
	Склад = Справочники.Склады.НайтиПоНаименованию( "Склад СОХ", Истина ); //ПскНаим
	Склад = Склад.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств( Склад, СкладРозн, "УчетныйВидЦены,ИсточникИнформацииОЦенахДляПечати" );
	Склад.Записать();
	
#КонецОбласти

#Область ВидыЦен
	
	ВидЦен = Справочники.ВидыЦен.НайтиПоНаименованию( "#Розничные цены склада (Магазин)", Истина ); //ПскНаим
	ТекОб  = ВидЦен.ПолучитьОбъект();
	ТекОб.Удалить();
	
	
	
	ВидЦенЦвет = Справочники.ВидыЦен.НайтиПоНаименованию( "Цветофор", Истина ); //ПскНаим
	
	лТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УстановкаЦенНоменклатурыВидыЦен.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры.ВидыЦен КАК УстановкаЦенНоменклатурыВидыЦен
		|ГДЕ
		|	УстановкаЦенНоменклатурыВидыЦен.ВидЦены = &ВидЦены
		|";

	лЗапрос = Новый Запрос(лТекст);
	лЗапрос.УстановитьПараметр( "ВидЦены", ВидЦенЦвет);
	
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл

		ТекОб = лВыборка.Ссылка.ПолучитьОбъект();
		ТекОб.Удалить();
		
	КонецЦикла;
	
	ТекОб = ВидЦенЦвет.ПолучитьОбъект();
	ТекОб.Удалить();
	
	
	
	лТекст = "
		|ВЫБРАТЬ
		|	ВидыЦен.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|";

	лЗапрос = Новый Запрос(лТекст);

	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл // общая установка полей
		
		ТекОб = лВыборка.Ссылка.ПолучитьОбъект();
		ТекОб.Статус = Перечисления.СтатусыДействияВидовЦен.Действует;
		Если	  ТекОб.Наименование = "Закупочная" Тогда
			
			ТекОб.ИспользоватьПриПродаже					= Ложь;
			ТекОб.УстанавливатьЦенуПриВводеНаОсновании		= Истина;
			ТекОб.ИспользоватьПриПередачеМеждуОрганизациями = Истина;
			
		//ИначеЕсли ТекОб.Наименование = "Оптовая" Тогда
		//	ТекОб.Формула = "[Закупочная] * 1.4";
		ИначеЕсли ТекОб.Наименование = "Розничная" Тогда
			ТекОб.ИспользоватьПриПродаже = Ложь;
		КонецЕсли;
		ТекОб.Записать();
		
	КонецЦикла;
	
#КонецОбласти

#Область ОтветственныеЛицаОрганизаций

	ДатаНачала = Дата( "20180129" );
	
	Орг = Справочники.Организации.НайтиПоНаименованию( "ООО ЦВЕТОФОР", Истина ); //ПскНаим
	
	лТекст = "
		|ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
		//|ГДЕ
		//|	ОтветственныеЛицаОрганизаций.Владелец = &Владелец
		|";
	
	лЗапрос = Новый Запрос(лТекст);
	//лЗапрос.УстановитьПараметр( "Владелец", Орг );
	
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		ТекОб = лВыборка.Ссылка.ПолучитьОбъект();
		Если ТекОб.Владелец = Орг Тогда
			ТекОб.ДатаНачала = Дата( "20180129" );
		Иначе
			ТекОб.ДатаНачала = НачалоГода( ТекущаяДата() );
		КонецЕсли;
		ТекОб.Записать();
		
	КонецЦикла;
	
#КонецОбласти
	
#Область Организации
	
	Орг = Справочники.Организации.НайтиПоНаименованию( "ИП Ризванов Р. К.", Истина ); //ПскНаим
	
	ТекОб = Орг.ПолучитьОбъект();
	ТекОб.Наименование = "Ризванов Р. К. ИП";
	ТекОб.Записать();
	
	
	Орг = Справочники.Организации.НайтиПоНаименованию( "ИП Ризванова Илона Олеговна", Истина ); //ПскНаим
	
	ТекОб = Орг.ПолучитьОбъект();
	ТекОб.Наименование = "Ризванова Илона Олеговна ИП";
	ТекОб.Записать();
	
	
	Орг = Справочники.Организации.НайтиПоНаименованию( "ООО ЦВЕТОФОР", Истина ); //ПскНаим
	
	ТекОб = Орг.ПолучитьОбъект();
	ТекОб.Наименование = "ЦВЕТОФОР ООО";
	ТекОб.Записать();

#КонецОбласти

#Область БанковскиеСчетаОрганизаций

	лТекст = "
		|ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|";

	лЗапрос = Новый Запрос(лТекст);

	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		ТекОб = лВыборка.Ссылка.ПолучитьОбъект();
		
		//ТекОб.ИспользоватьПрямойОбменСБанком = Истина;
		ТекОб.ИспользоватьОбменСБанком = Истина;
		ТекОб.ОбменСБанкомВключен	   = Истина;
		
		Если	 ТекОб.Наименование = "ИП Ризванов" Тогда
			ТекОб.Наименование = "Ризванов Р. К. ИП";
		ИначеЕсли ТекОб.Наименование = "Ризванова И.О." Тогда
			ТекОб.Наименование = "Ризванова Илона Олеговна ИП";
		ИначеЕсли ТекОб.Наименование = "ООО ЦВЕТОФОР" Тогда
			ТекОб.Наименование = "ЦВЕТОФОР ООО";
		КонецЕсли;
		
		ТекОб.Записать();
		
	КонецЦикла;
	
#КонецОбласти

#Область ДопРеквизиты

	ТипБулево = Новый ОписаниеТипов( "Булево" );
	ТипСтрока = Новый ОписаниеТипов( "Строка" );
	ТипЧисло  = Новый ОписаниеТипов( "Число"  );
	ТипДата	  = Новый ОписаниеТипов( "Дата"	  );
	
#Область Товары
	
	НаборДопРекв = Справочники.НаборыДополнительныхРеквизитовИСведений.НайтиПоНаименованию( "Товар", Истина ); //ПскНаим
	
	СоздатьДопРекв( "Тара"				     , ТипСтрока, НаборДопРекв );
	СоздатьДопРекв( "Неликвид"				 , ТипБулево, НаборДопРекв,,, "Товар не продается, подсветка жирным в списке" );
	СоздатьДопРекв( "Транспорт в тепле"		 , ТипБулево, НаборДопРекв,,, "Доставка только в кабине - товар боится мороза" );
	СоздатьДопРекв( "Топ"					 , ТипБулево, НаборДопРекв,,, "Выводить с приставкой ТОП в прайсе" );
	СоздатьДопРекв( "Снят с производства"	 , ТипБулево, НаборДопРекв,,, "Скрыть в Моби-С и прочих выгрузках" );
	СоздатьДопРекв( "Количество на витрине"  , ТипЧисло , НаборДопРекв,,, "Количество товара на витрине" );
	СоздатьДопРекв( "Дата регистрации"		 , ТипДата  , НаборДопРекв,,, "Дата регистрации товара в системе" );
	СоздатьДопРекв( "Зона хранения на складе", ТипСтрока, НаборДопРекв );
	
	СоздатьДопРекв( "Топ товар"				 , ТипБулево, НаборДопРекв,							 ,, "Для прайс-листа"							, Истина );
	СоздатьДопРекв( "ХенкельУчет"			 , ТипБулево, НаборДопРекв, "Учитывать в системе"	 ,,"Флаг того, что надо следить"				, Истина );
	СоздатьДопРекв( "ХенкельКоличество"		 , ТипЧисло , НаборДопРекв, "Учетное количество"	 ,,"Мин.количество, меньше которого копим"		, Истина );
	СоздатьДопРекв( "ХенкельЦена"			 , ТипЧисло , НаборДопРекв, "Учетная цена"			 ,,"Цена, меньше которой копим"					, Истина );
	СоздатьДопРекв( "ХенкельЦенаРелизации"	 , ТипЧисло , НаборДопРекв, "Учетная цена реализации",,"Цена, по которой продаем в РелизацияХенкель", Истина );
	
#КонецОбласти

#Область Партнеры


	
#КонецОбласти

#КонецОбласти

#Область Сегменты

	СпрСегменты		= Справочники.СегментыПартнеров;
	
	МакетСегмента = Неопределено;
	Для Каждого Макет Из Метаданные.Справочники.СегментыПартнеров.Макеты Цикл
		
		Если Макет.Имя = "ОсновнаяСхема" Тогда
			
			МакетСегмента = Макет;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	СоздатьГруппуСегментов( "Запреты отгрузок",, СпрСегменты );

	ГруппаСегмента = СоздатьГруппуСегментов( "Виды продаж",, СпрСегменты );
	
	СоздатьСегмент( "Владельцы карт" , ГруппаСегмента,, СпрСегменты, МакетСегмента );
	СоздатьСегмент( "Наши фирмы"	 , ГруппаСегмента,, СпрСегменты, МакетСегмента );
	СоздатьСегмент( "Розница"		 , ГруппаСегмента,, СпрСегменты, МакетСегмента );
	СоздатьСегмент( "Оптовые продажи", ГруппаСегмента, Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять, СпрСегменты, МакетСегмента );
	
	
	
	СпрСегменты		= Справочники.СегментыНоменклатуры;
	
	МакетСегмента = Неопределено;
	Для Каждого Макет Из Метаданные.Справочники.СегментыНоменклатуры.Макеты Цикл
		
		Если Макет.Имя = "ОсновнаяСхема" Тогда
			
			МакетСегмента = Макет;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ГруппаСегмента = СоздатьГруппуСегментов( "Прайс (группа сегмента)",, СпрСегменты );
	
	СоздатьСегмент( "Не в прайс", ГруппаСегмента,, СпрСегменты, МакетСегмента );
	СоздатьСегмент( "Прайс"		, ГруппаСегмента, Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять, СпрСегменты, МакетСегмента );
	
	
	
	ГруппаСегмента = СоздатьГруппуСегментов( "Продаваемость (группа сегмента)",, СпрСегменты );
	
	СоздатьСегмент( "Распродажа", ГруппаСегмента,, СпрСегменты, МакетСегмента );
	СоздатьСегмент( "Ходовые"	, ГруппаСегмента, Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять, СпрСегменты, МакетСегмента );
	
#КонецОбласти

#Область НомерГТД

	лТекст = "
		|ВЫБРАТЬ
		|	НомераГТД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НомераГТД КАК НомераГТД
		|";

	лЗапрос = Новый Запрос(лТекст);

	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл // удалим ГТД (они лишние, заполним при загрузке полей товаров)
		
		ТекОб = лВыборка.Ссылка.ПолучитьОбъект();
		ТекОб.Удалить();
		
	КонецЦикла;
	
#КонецОбласти
	
КонецПроцедуры

Процедура ЗагрузитьСправочникиНаСервере( ПапкаФайлов )
	
	ТЗ = ОбщегоНазначенияСерверДобавленный.ПрочитатьФайлCSV( ПапкаФайлов + "Производители.txt" );
	Для Каждого Стр Из ТЗ Цикл
		
	    Произв = Справочники.Производители.СоздатьЭлемент();
		Произв.Наименование = Стр.Производитель;
		Произв.Записать();
		
	КонецЦикла;
	
	ТЗ = ОбщегоНазначенияСерверДобавленный.ПрочитатьФайлCSV( ПапкаФайлов + "БрендыНовые.txt" );
	Для Каждого Стр Из ТЗ Цикл
		
		Если Стр.ЭтоГруппа = "1" Тогда
		    Марка = Справочники.Марки.СоздатьГруппу();
		Иначе
			
			РодительМарки = Справочники.Марки.НайтиПоНаименованию( Стр.Родитель, Истина); //ПскНаим
			Если Не ЗначениеЗаполнено( РодительМарки ) Тогда //Продолжить
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не найден родитель для бренда: " + Стр.Родитель );
				Продолжить;
				
			КонецЕсли;
		    Марка = Справочники.Марки.СоздатьЭлемент();
			
			Марка.Родитель = РодительМарки;
			
		КонецЕсли;
		
		Марка.Наименование = Стр.Наименование;
		Марка.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоляТоваровНаСервере( ПапкаВыгрузки )
	
#Область Инит

	ЕдиницаКГ  = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию( "кг", Истина); //ПскНаим
	
	ПВХТара	   = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию( "Тара (Товар)"					, Истина ); //ПскНаим
	ПВХТрансп  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию( "Транспорт в тепле (Товар)"		, Истина ); //ПскНаим
	ПВХТоп	   = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию( "Топ (Товар)"					, Истина ); //ПскНаим
	ПВХВитрина = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию( "Количество на витрине (Товар)"	, Истина ); //ПскНаим
	ПВХДатаРег = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию( "Дата регистрации (Товар)"		, Истина ); //ПскНаим
	ПВХЗонаХр  = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию( "Зона хранения на складе (Товар)", Истина ); //ПскНаим
	
	ПВХХенкельУчет	   = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию( "ХенкельУчет (Товар)"		 , Истина ); //ПскНаим
	ПВХХенкельКолво	   = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию( "ХенкельКоличество (Товар)"	 , Истина ); //ПскНаим
	ПВХХенкельЦена	   = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию( "ХенкельЦена (Товар)"		 , Истина ); //ПскНаим
	ПВХХенкельЦенаРеал = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию( "ХенкельЦенаРелизации (Товар)", Истина ); //ПскНаим
	
	НаборЗаписейДопРекв = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	
	ТипСтрока = Новый ОписаниеТипов( "Строка" );
	
	ТЗ_ГТД = Новый ТаблицаЗначений;
	Колонка = ТЗ_ГТД.Колонки.Добавить( "НомерГТД" , Новый ОписаниеТипов( "Строка"						) );
	Колонка = ТЗ_ГТД.Колонки.Добавить( "Страна"	  , Новый ОписаниеТипов( "СправочникСсылка.СтраныМира" ) );
	
	СтруктураДляПоиска = Новый Структура;
	
#КонецОбласти
	
	ТЗ = ОбщегоНазначенияСерверДобавленный.ПрочитатьФайлCSV( ПапкаВыгрузки + "ПоляТоваров.txt" );
	Для Каждого Стр Из ТЗ Цикл
		
		Товар = Справочники.Номенклатура.НайтиПоКоду( Стр.Код );
		Если Не ЗначениеЗаполнено( Товар ) Тогда //Продолжить
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не найден товар с кодом: " + Стр.Код );
			Продолжить;
			
		КонецЕсли;
		Товар = Товар.ПолучитьОбъект();
		
		
		
		СтрПроизводитель = Стр.Производитель;
		Если ЗначениеЗаполнено( СтрПроизводитель ) Тогда
			
			Производитель = Справочники.Производители.НайтиПоНаименованию( СтрПроизводитель, Истина );
			Если ЗначениеЗаполнено( Производитель ) Тогда
				Товар.Производитель = Производитель;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не установлен производитель " + СтрПроизводитель + ": не найден в справочнике" );
			КонецЕсли;
			
		КонецЕсли;
		
		СтрМарка = Стр.БрендНовый;
		Если ЗначениеЗаполнено( СтрМарка ) Тогда
			
			Марка = Справочники.Марки.НайтиПоНаименованию( СтрМарка, Истина );
			Если ЗначениеЗаполнено( Марка ) Тогда
				Товар.Марка = Марка;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не установлена марка " + СтрМарка + ": не найден в справочнике" );
			КонецЕсли;
			
		КонецЕсли;
		
		Вес = Число( Стр.Вес );
		Если ЗначениеЗаполнено( Вес ) Тогда
			
			Товар.ВесИспользовать = Истина;
			//Товар.ВесМожноУказыватьВДокументах = Истина; // нельзя!! иначе можно в документе выдавать в кг
			Товар.ВесЧислитель    = Вес;
			Товар.ВесЗнаменатель  = 1;
			Товар.ВесЕдиницаИзмерения = ЕдиницаКГ;
			
		КонецЕсли;
		
		
		
		ТЧДопРекв = Товар.ДополнительныеРеквизиты;
		
		Если ЗначениеЗаполнено( Стр.Тара ) Тогда
			
			НовСтр = ТЧДопРекв.Добавить();
			НовСтр.Свойство		   = ПВХТара;
			НовСтр.Значение		   = Стр.Тара;
			НовСтр.ТекстоваяСтрока = Стр.Тара;
			
		КонецЕсли;
		Если ЗначениеЗаполнено( Стр.ТранспортВТепле ) Тогда
			
			НовСтр = ТЧДопРекв.Добавить();
			НовСтр.Свойство		   = ПВХТрансп;
			НовСтр.Значение		   = Истина;
			
		КонецЕсли;
		Если ЗначениеЗаполнено( Стр.ТопТовары ) Тогда
			
			НовСтр = ТЧДопРекв.Добавить();
			НовСтр.Свойство		   = ПВХТоп;
			НовСтр.Значение		   = Истина;
			
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено( Стр.Витрина ) Тогда
			
			НовСтр = ТЧДопРекв.Добавить();
			НовСтр.Свойство		   = ПВХВитрина;
			НовСтр.Значение		   = Число( Стр.Витрина );
			
		КонецЕсли;
		Если ЗначениеЗаполнено( Стр.ДатаРегистрации ) Тогда
			
			НовСтр = ТЧДопРекв.Добавить();
			НовСтр.Свойство		   = ПВХДатаРег;
			НовСтр.Значение		   = ОбщегоНазначенияСерверДобавленный.ДатаИзСтроки(  Стр.ДатаРегистрации );
			
		КонецЕсли;
		Если ЗначениеЗаполнено( Стр.ЗонаХраненияНаСкладе ) Тогда
			
			НовСтр = ТЧДопРекв.Добавить();
			НовСтр.Свойство		   = ПВХЗонаХр;
			НовСтр.Значение		   = Стр.ЗонаХраненияНаСкладе;
			
		КонецЕсли;
		
		Товар.Записать();
		
		Если ЗначениеЗаполнено( Стр.ХенкельУчет ) Тогда
			
			НовСтр = НаборЗаписейДопРекв.Добавить();
			НовСтр.Объект	= Товар.Ссылка;
			НовСтр.Свойство = ПВХХенкельУчет;
			НовСтр.Значение = Истина;
			
		КонецЕсли;
		Если ЗначениеЗаполнено( Стр.ХенкельЦена ) Тогда
			
			НовСтр = НаборЗаписейДопРекв.Добавить();
			НовСтр.Объект	= Товар.Ссылка;
			НовСтр.Свойство = ПВХХенкельЦена;
			НовСтр.Значение = Число( Стр.ХенкельЦена );
			
		КонецЕсли;
		Если ЗначениеЗаполнено( Стр.ХенкельКоличество   ) Тогда
			
			НовСтр = НаборЗаписейДопРекв.Добавить();
			НовСтр.Объект	= Товар.Ссылка;
			НовСтр.Свойство = ПВХХенкельКолво;
			НовСтр.Значение = Число( Стр.ХенкельКоличество );
			
		КонецЕсли;
		Если ЗначениеЗаполнено( Стр.ХенкельЦенаРеалХенк ) Тогда
			
			НовСтр = НаборЗаписейДопРекв.Добавить();
			НовСтр.Объект	= Товар.Ссылка;
			НовСтр.Свойство = ПВХХенкельЦенаРеал;
			НовСтр.Значение = Число( Стр.ХенкельЦенаРеалХенк );
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено( Стр.ГТД ) Тогда
			
			Если ЗначениеЗаполнено( Стр.Страна ) Тогда
				
				Страна = Справочники.СтраныМира.НайтиПоКоду( Стр.Страна, Истина ); //Пскнаим
				Если Не ЗначениеЗаполнено( Страна ) Тогда //Продолжить
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не найдена страна с кодом: " + Стр.Страна );
				Иначе
					
					СтруктураДляПоиска.Очистить();
					СтруктураДляПоиска.Вставить( "НомерГТД", Стр.ГТД );
					СтруктураДляПоиска.Вставить( "Страна"  , Страна  );
					
					Если Не ЗначениеЗаполнено( ТЗ_ГТД.НайтиСтроки( СтруктураДляПоиска ) ) Тогда
						
						СтрТЗ = ТЗ_ГТД.Добавить();
						СтрТЗ.НомерГТД  = Стр.ГТД;
						СтрТЗ.Страна	= Страна;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из ТЗ_ГТД Цикл
		
		Элем = Справочники.НомераГТД.СоздатьЭлемент();
		Элем.Код				 = Стр.НомерГТД;
		Элем.СтранаПроисхождения = Стр.Страна;
		Элем.Записать();
		
	КонецЦикла;
	
    НаборЗаписейДопРекв.Записать( Истина ); // Запишем весь набор разом и затрём все другие записи
	
	
	
	ТЗ = ОбщегоНазначенияСерверДобавленный.ПрочитатьФайлCSV( ПапкаВыгрузки + "ТоварыНаименования.txt" ); //уберем точку в конце, добавленную для борьбы с дублями
	Для Каждого Стр Из ТЗ Цикл
		
		Товар = Справочники.Номенклатура.НайтиПоКоду( Стр.Код );
		Если Не ЗначениеЗаполнено( Товар ) Тогда //Продолжить
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не найден товар с кодом: " + Стр.Код );
			Продолжить;
			
		КонецЕсли;
		Товар = Товар.ПолучитьОбъект();
		
		
		
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Процедура ПеренумерацияСправочников(Команда)
	
КонецПроцедуры



Процедура ЗаполнитьПоляУслугиНаСервере()
// заполним услугу данными из товара
	
	ВидНомрыТовар = Справочники.ВидыНоменклатуры.НайтиПоНаименованию( "Товар (пр. ТМЦ)", Истина ); //ПскНаим
	Если Не ЗначениеЗаполнено( ВидНомрыТовар ) Тогда
		ВидНомрыТовар = Справочники.ВидыНоменклатуры.НайтиПоНаименованию( "Товар", Истина ); //ПскНаим
	КонецЕсли;
	Если Не ЗначениеЗаполнено( ВидНомрыТовар ) Тогда //Возврат
		Возврат;
	КонецЕсли;
	
	ВидНомрыУслуги = Справочники.ВидыНоменклатуры.НайтиПоНаименованию( "Услуга", Истина ); //ПскНаим
	Если Не ЗначениеЗаполнено( ВидНомрыУслуги ) Тогда //Возврат
		Возврат;
	КонецЕсли;
	ВидНомрыУслуги = ВидНомрыУслуги.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств( ВидНомрыУслуги, ВидНомрыТовар.Ссылка, "СтавкаНДС,ЗапретРедактированияНаименованияДляПечатиНоменклатуры,ШаблонНаименованияДляПечатиНоменклатуры,ШаблонРабочегоНаименованияНоменклатуры" );
	ВидНомрыУслуги.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляУслуги( Результат, Контекст ) Экспорт
	ЗаполнитьПоляУслугиНаСервере();
КонецПроцедуры

#Область Готовые
	
Функция   СоздатьГруппуСкладов( Наим )
	
    Группа = Справочники.Склады.СоздатьГруппу();
 	Группа.Наименование = Наим;
	
    Попытка
	
        Группа.Записать();
        Возврат Группа.Ссылка;
		
    Исключение
        Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура СоздатьГруппыСкладовНаСервере()
	
	ГруппаСкладов = СоздатьГруппуСкладов( "Розница"  );
	
	Спр = Справочники.Склады.НайтиПоНаименованию( "Магазин" );
	Спр = Спр.ПолучитьОбъект();
	Спр.Наименование = "Магазин Розничный";
	Спр.Родитель     = ГруппаСкладов;
	Спр.Записать();
	
	Спр = Справочники.Склады.НайтиПоНаименованию( "Магазин Цветофор" );
	Спр = Спр.ПолучитьОбъект();
	Спр.Родитель = ГруппаСкладов;
	Спр.ТекущийОтветственный = Справочники.ФизическиеЛица.ПустаяСсылка();
	Спр.Записать();
	
	
	
	ГруппаСкладов = СоздатьГруппуСкладов( "Автомобили"  );
	
	Спр = Справочники.Склады.НайтиПоНаименованию( "Машина HD-78 822" );
	Спр = Спр.ПолучитьОбъект();
	Спр.Родитель     = ГруппаСкладов;
	Спр.Записать();
	
	Спр = Справочники.Склады.НайтиПоНаименованию( "Машина HD-78 855" );
	Спр = Спр.ПолучитьОбъект();
	Спр.Родитель     = ГруппаСкладов;
	Спр.Записать();
	
	Спр = Справочники.Склады.НайтиПоНаименованию( "Машина Газель 444" );
	Спр = Спр.ПолучитьОбъект();
	Спр.Родитель     = ГруппаСкладов;
	Спр.Записать();
	
	Спр = Справочники.Склады.НайтиПоНаименованию( "Машина Газель Т555ТЕ" );
	Спр = Спр.ПолучитьОбъект();
	Спр.Родитель     = ГруппаСкладов;
	Спр.Записать();
	
	Спр = Справочники.Склады.НайтиПоНаименованию( "Машина Ларгус У111ВК" );
	Спр = Спр.ПолучитьОбъект();
	Спр.Родитель     = ГруппаСкладов;
	Спр.Записать();
	
	Спр = Справочники.Склады.НайтиПоНаименованию( "Машина Погрузчик" );
	Спр = Спр.ПолучитьОбъект();
	Спр.Родитель     = ГруппаСкладов;
	Спр.Записать();
	
	
	//СоздатьГруппуСкладов( "Основные" );
	//ГруппаСкладов = Справочники.Склады.НайтиПоНаименованию( "Основные" );
	//
	//Спр = Справочники.Склады.НайтиПоНаименованию( "Основной склад" );
	//Спр = Спр.ПолучитьОбъект();
	//Спр.Родитель     = ГруппаСкладов;
	//Спр.Записать();
	//
	//Спр = Справочники.Склады.НайтиПоНаименованию( "Склад СОХ" );
	//Спр = Спр.ПолучитьОбъект();
	//Спр.Родитель     = ГруппаСкладов;
	//Спр.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппыСкладов(Команда)
	
	СоздатьГруппыСкладовНаСервере();
	
	ОткрытьФорму( "Справочник.Склады.Форма.ФормаСписка",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
	
КонецПроцедуры



Функция   СоздатьГруппуПользователей( Наим, Родитель = Неопределено )
	
    Группа = Справочники.ГруппыПользователей.СоздатьЭлемент();
 	Группа.Наименование = Наим;
	Группа.Родитель = Родитель;
	
    Попытка
	
        Группа.Записать();
        Возврат Группа.Ссылка;
		
    Исключение
        Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура СоздатьГруппыПользователейНаСервере()
	
	Константы.ИспользоватьГруппыПользователей.Установить( Истина );
	
#Область СозданиеГрупп
	
	СоздатьГруппуПользователей( "Администраторы" );
	
	
	Опт = СоздатьГруппуПользователей( "Опт" );
	СоздатьГруппуПользователей( "Заместитель директора", Опт );
	СоздатьГруппуПользователей( "Доставка"			   , Опт );
	
	
	Розница = СоздатьГруппуПользователей( "Розница" );
	//СоздатьГруппуПользователей( "Магазин Розница" , Розница );
	//СоздатьГруппуПользователей( "Магазин Цветофор", Розница );
	
	
	ТоргПред = СоздатьГруппуПользователей( "Торговые представители" );
	СоздатьГруппуПользователей( "Начальники торговых представителей" , ТоргПред );
	СоздатьГруппуПользователей( "Лакра"	  , ТоргПред );
	СоздатьГруппуПользователей( "Оптимист", ТоргПред );
	СоздатьГруппуПользователей( "Рогнеда" , ТоргПред );
	
	Хенкель = СоздатьГруппуПользователей( "Хенкель" , ТоргПред );
	СоздатьГруппуПользователей( "Начальники Хенкель", Хенкель  );
	
	//СоздатьГруппуПользователей( "Текс"	  , ТоргПред );
	//СоздатьГруппуПользователей( "Царицыно", ТоргПред );
	//СоздатьГруппуПользователей( "Ярославские краски", ТоргПред );
	
	
	Управление = СоздатьГруппуПользователей( "Управление" );
	СоздатьГруппуПользователей( "Главный бухгалтер" , Управление );
	
#КонецОбласти 
	
#Область ПереносПользователей
	
	ПереносПользователейВГруппу( "Администраторы"	, "Администратор|Юсупов Ильдар Флюрович" );
	
	ПереносПользователейВГруппу( "Управление"		, "Ризванов Радик Кайманович" );
	ПереносПользователейВГруппу( "Главный бухгалтер", "Ризванова Илона Олеговна"  );
	
	
	//ПереносПользователейВГруппу( "Магазин Розница" , "Максимова Ольга Леонидовна"   );
	//ПереносПользователейВГруппу( "Магазин Цветофор", "Минниголова Лилия Ильдусовна" );
	ПереносПользователейВГруппу( "Розница", "Максимова Ольга Леонидовна"   );
	ПереносПользователейВГруппу( "Розница", "Минниголова Лилия Ильдусовна" );
	
	
	ПереносПользователейВГруппу( "Опт"					, "Изинидова Снежана Вячеславовна|Симанова Екатерина Александровна" );
	ПереносПользователейВГруппу( "Заместитель директора", "Рожкина Екатерина Анатольевна" );
	ПереносПользователейВГруппу( "Доставка"				, "Лошкарева Наталия Анатольевна|Рожкина Екатерина Анатольевна|Симанова Екатерина Александровна"  );
	
	
	
	ПереносПользователейВГруппу( "Начальники торговых представителей", "Иванов Алексей Владимирович" );
	
	ПереносПользователейВГруппу( "Лакра"   , "Богатырёв Анатолий Викторович|Гаврилов Андрей Олегович" );
	ПереносПользователейВГруппу( "Оптимист", "Ефремова Юлия Викторовна|Романова Эльвира Владимировна" );
	ПереносПользователейВГруппу( "Рогнеда" , "Павлов Максим Игоревич|Садыков Ленар Азатович"		  );
	
	
	ПереносПользователейВГруппу( "Начальники Хенкель", "Будин Алексей Петрович" );
	ПереносПользователейВГруппу( "Хенкель"			 , "Белов Алексей Геннадьевич|Дорофеев Станислав Леонидович|Кельдяров Дмитрий Александрович|Перевощиков Виталий Николаевич|Порфилов Максим Валерьевич" );
	
	//ПереносПользователейВГруппу( "Текс"			   , ""	);
	//ПереносПользователейВГруппу( "Царицыно"		   , "" );
	//ПереносПользователейВГруппу( "Ярославские краски", "" );
	
#КонецОбласти 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппыПользователей(Команда)
	
	СоздатьГруппыПользователейНаСервере();
	
	ОткрытьФорму( "Справочник.Пользователи.Форма.ФормаСписка",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
	
КонецПроцедуры



Процедура ЗаполнитьСтраныНаСервере()
//удалим ненужные и заполним поля у нужных
	
//Удаление ненужных
	
	Ссылки = Новый Массив;
	Ссылки.Добавить(Справочники.СтраныМира.НайтиПоНаименованию("--"));
	Ссылки.Добавить(Справочники.СтраныМира.НайтиПоНаименованию("яя"));
	Ссылки.Добавить(Справочники.СтраныМира.НайтиПоНаименованию("яя_не_выбирать"));
	Ссылки.Добавить(Справочники.СтраныМира.НайтиПоНаименованию("яя_не_выбирать--"));
	Ссылки.Добавить(Справочники.СтраныМира.НайтиПоНаименованию("яя_не_выбирать-Голландия"));
	Ссылки.Добавить(Справочники.СтраныМира.НайтиПоНаименованию("яя_Т-а-й-в-а-н-ь (-к-и-т-а-й-)_не_выбирать"));
	Ссылки.Добавить(Справочники.СтраныМира.НайтиПоНаименованию("КОРЕЯ, НАРОДНО-ДЕМОКРАТИЧЕСКАЯ РЕСПУБЛИКА"));
	
	Для Каждого ТекСтрана Из Ссылки Цикл //удалим
		
		СтранаОб = ТекСтрана.ПолучитьОбъект();
		СтранаОб.Удалить();
		
	КонецЦикла;
	
	
	
//Чтение типовых стран
	
	Макет = Справочники.СтраныМира.ПолучитьМакет("Классификатор");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	
	ТЗ_Стран = СериализаторXDTO.ПрочитатьXML(Чтение);	
	
	
	
//Заполнение полей стран

	Ссылки = Новый Массив;
	Ссылки.Добавить(Справочники.СтраныМира.Россия); // 643 - исключения
	
	лТекст = "
		|ВЫБРАТЬ
		|	СтраныМира.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|ГДЕ
		|	Не СтраныМира.Ссылка В (&Ссылки)
		|";

	лЗапрос = Новый Запрос(лТекст);
	лЗапрос.УстановитьПараметр("Ссылки", Ссылки);

	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		СтранаОб = лВыборка.Ссылка.ПолучитьОбъект();
		
		СтрокаТЗ = ТЗ_Стран.Найти( СтранаОб.Код, "Код" );
		Если ЗначениеЗаполнено( СтрокаТЗ ) Тогда
			
			ЗаполнитьЗначенияСвойств( СтранаОб, СтрокаТЗ );
			СтранаОб.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтраны(Команда)
	
	ЗаполнитьСтраныНаСервере();
	
	ОткрытьФорму( "Справочник.СтраныМира.Форма.ФормаСписка",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
	
КонецПроцедуры



Процедура УдалитьДопЗначенияНаСервере()
//удалим Координаты GPS и 2 маршрута

//сами значения
	лТекст = "
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|";

	лЗапрос = Новый Запрос(лТекст);

	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл

		ТекОб = лВыборка.Ссылка.ПолучитьОбъект();
		ТекОб.Удалить();
		
	КонецЦикла;
	
	
//ПВХ
	лТекст = "
		|ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|";

	лЗапрос = Новый Запрос(лТекст);

	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		ТекОб = лВыборка.Ссылка.ПолучитьОбъект();
		ТекОб.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДопЗначения(Команда)
	УдалитьДопЗначенияНаСервере();
КонецПроцедуры



Процедура УдалитьФизЛицаНаСервере()
	
	Ссылки = Справочники.ФизическиеЛица.НайтиПоНаименованию( "Я_Старые", Истина );
	
	лТекст = "
		|ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В Иерархии (&Ссылки)
		|	
		|";

	лЗапрос = Новый Запрос(лТекст);
	лЗапрос.УстановитьПараметр( "Ссылки", Ссылки );

	ТЗ = Новый ТаблицаЗначений; //чтобы удалять по уровню - сначала самые низкие
	ТЗ.Колонки.Добавить( "Ссылка" , Новый ОписаниеТипов( "СправочникСсылка.ФизическиеЛица" ) );
	ТЗ.Колонки.Добавить( "Уровень", Новый ОписаниеТипов( "Число" ) );
	
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		Стр = ТЗ.Добавить();
		Стр.Ссылка  = лВыборка.Ссылка;
		Стр.Уровень = лВыборка.Ссылка.Уровень();
		
	КонецЦикла;
	
	ТЗ.Сортировать( "Уровень Убыв" );
	
	Для Каждого Стр Из ТЗ Цикл
		
		ТекОб = Стр.Ссылка.ПолучитьОбъект();
		ТекОб.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФизЛица(Команда)
	
	УдалитьФизЛицаНаСервере();
	
	ОткрытьФорму( "Справочник.ФизическиеЛица.Форма.ФормаСписка",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
	
КонецПроцедуры



Функция   УдалитьПустыеГруппыТоваровШаг()
	
	КолвоУдаленных = 0;
	
	лТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|        Номенклатура.Родитель КАК Родитель
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|        Справочник.Номенклатура КАК Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|        Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|        Справочник.Номенклатура КАК Номенклатура
		|                ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|                ПО (Номенклатура.Ссылка = ВТ.Родитель)
		|ГДЕ
		|        ВТ.Родитель ЕСТЬ NULL 
		|        И Номенклатура.ЭтоГруппа = ИСТИНА
		|";

	лЗапрос = Новый Запрос(лТекст);
	лЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		ТекОб = лВыборка.Ссылка.ПолучитьОбъект();
		ТекОб.Удалить();
		
		КолвоУдаленных = КолвоУдаленных + 1;
		
	КонецЦикла;
	
	Возврат КолвоУдаленных;
	
КонецФункции

Процедура УдалитьПустыеГруппыТоваровНаСервере()
	
	КолвоУдаленных = 0;
	
	Пока Истина Цикл
		
		ТекКолво = УдалитьПустыеГруппыТоваровШаг();
		Если Не ЗначениеЗаполнено( ТекКолво ) Тогда //Прервать
			Прервать;
		КонецЕсли;
		
		КолвоУдаленных = КолвоУдаленных + ТекКолво;			
			
	КонецЦикла;
	
	Если ЗначениеЗаполнено( КолвоУдаленных ) Тогда
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Удалено групп товаров: " + КолвоУдаленных );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеГруппыТоваров(Команда)
	УдалитьПустыеГруппыТоваровНаСервере();
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область ЕдИзм

Функция	  ЗаписьЕдИзмНаСервере()
	
	Загол = "Код ; Наименование ; Числитель ; Знаменатель ; НаименованиеПолное  ; МеждународноеСокращение ; ТипИзмеряемойВеличины";
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить( Загол ); 
	
	лТекст = "
		|ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
		|	УпаковкиЕдиницыИзмерения.Владелец КАК Владелец,
		|	УпаковкиЕдиницыИзмерения.Код КАК Код,
		|	УпаковкиЕдиницыИзмерения.Наименование КАК Наименование,
		|	УпаковкиЕдиницыИзмерения.Числитель КАК Числитель,
		|	УпаковкиЕдиницыИзмерения.Знаменатель КАК Знаменатель,
		|	УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
		|	УпаковкиЕдиницыИзмерения.НаименованиеПолное КАК НаименованиеПолное,
		|	УпаковкиЕдиницыИзмерения.МеждународноеСокращение КАК МеждународноеСокращение,
		|	//УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.Безразмерная КАК Безразмерная,
		|	УпаковкиЕдиницыИзмерения.ТипУпаковки КАК ТипУпаковки,
		|	УпаковкиЕдиницыИзмерения.Вес КАК Вес,
		|	УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.Высота КАК Высота,
		|	УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения КАК ВысотаЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.Глубина КАК Глубина,
		|	УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения КАК ГлубинаЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.ЛинейныеРазмерыПредставление КАК ЛинейныеРазмерыПредставление,
		|	УпаковкиЕдиницыИзмерения.Объем КАК Объем,
		|	УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения КАК ОбъемЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.Ширина КАК Ширина,
		|	УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения КАК ШиринаЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок КАК КоличествоУпаковок,
		|	УпаковкиЕдиницыИзмерения.ПоставляетсяВМногооборотнойТаре КАК ПоставляетсяВМногооборотнойТаре,
		|	УпаковкиЕдиницыИзмерения.НоменклатураМногооборотнаяТара КАК НоменклатураМногооборотнаяТара,
		|	УпаковкиЕдиницыИзмерения.ХарактеристикаМногооборотнаяТара КАК ХарактеристикаМногооборотнаяТара,
		|	УпаковкиЕдиницыИзмерения.МинимальноеКоличествоУпаковокМногооборотнойТары КАК МинимальноеКоличествоУпаковокМногооборотнойТары
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ( УпаковкиЕдиницыИзмерения.Владелец ) <> ЗНАЧЕНИЕ(Справочник.Номенклатура)
		|	//И ТИПЗНАЧЕНИЯ( УпаковкиЕдиницыИзмерения.Владелец ) <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Владелец,
		|	Наименование
		|";

	лЗапрос = Новый Запрос(лТекст);

	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		Если ТипЗнч(лВыборка.Владелец)=Тип("СправочникСсылка.НаборыУпаковок") Тогда //Продолжить
			
			Если лВыборка.Владелец.Наименование = "Базовые единицы измерения" Тогда
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Стр = ""	+ лВыборка.Код
			+ " ; " + лВыборка.Наименование
			//+ " ; " + лВыборка.Числитель
			//+ " ; " + лВыборка.Знаменатель
			+ " ; " + Формат(лВыборка.Числитель, "ЧГ=0") 
			+ " ; " + Формат(лВыборка.Знаменатель, "ЧГ=0")
			+ " ; " + лВыборка.НаименованиеПолное
			+ " ; " + лВыборка.МеждународноеСокращение
			+ " ; " + лВыборка.ТипИзмеряемойВеличины;
			
		МассивСтрок.Добавить( Стр ); 	
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

&НаКлиенте
Процедура ЗаписьЕдИзм(Команда)
	
	МассивСтрок = ЗаписьЕдИзмНаСервере();
	
	
	Текст = Новый ТекстовыйДокумент;
	Для Каждого Стр Из МассивСтрок Цикл
	 	Текст.ДобавитьСтроку( Стр );	
	КонецЦикла; 
	
	Текст.Записать( ИмяФайлаВыгрузки( "ЕдИзм.txt" ) );
	
КонецПроцедуры



Процедура ЧтениеЕдИзмСервере( МассивСтрок )
	
	ТЗ = Новый ТаблицаЗначений;
	
	Шапка = МассивСтрок[0];
	МассивКол = СтрРазделить( Шапка, ";", Ложь );
	МассивСтрок.Удалить( 0 ); //удалим шапку
	
	Для Каждого ИмяСтолбца Из МассивКол Цикл
		
		ИмяБезПробелов = СтрЗаменить( ИмяСтолбца, " ", "" );
		ТЗ.Колонки.Добавить( ИмяБезПробелов,, ИмяСтолбца ); 
		
	КонецЦикла;
	
	Для Каждого Стр Из МассивСтрок Цикл
		
		МассивКол = СтрРазделить( Стр, ";", Ложь );
		СтрокаТЗ = ТЗ.Добавить();
		
		Если МассивКол.Количество() <> ТЗ.Колонки.Количество() Тогда
			Продолжить; // скорее всего в тексте содержит разделитель 
		КонецЕсли;
		
		Для НомерСтолбца= 1 по МассивКол.Количество() Цикл //заполняем строчку значениями 
			
			ТекущееЗначение = МассивКол[ НомерСтолбца - 1 ];
			ИмяКолонки		= ТЗ.Колонки[ НомерСтолбца - 1 ].Имя;
			
			СтрокаТЗ[ ИмяКолонки ] = СокрЛП( ТекущееЗначение ); 
			
		КонецЦикла; 
		
	КонецЦикла;
	

	Отбор = Новый Структура();
	
	лТекст = "
		|ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
		|	УпаковкиЕдиницыИзмерения.Владелец КАК Владелец,
		|	УпаковкиЕдиницыИзмерения.Код КАК Код,
		|	УпаковкиЕдиницыИзмерения.Наименование КАК Наименование,
		|	УпаковкиЕдиницыИзмерения.Числитель КАК Числитель,
		|	УпаковкиЕдиницыИзмерения.Знаменатель КАК Знаменатель,
		|	УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
		|	УпаковкиЕдиницыИзмерения.НаименованиеПолное КАК НаименованиеПолное,
		|	УпаковкиЕдиницыИзмерения.МеждународноеСокращение КАК МеждународноеСокращение,
		|	//УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.Безразмерная КАК Безразмерная,
		|	УпаковкиЕдиницыИзмерения.ТипУпаковки КАК ТипУпаковки,
		|	УпаковкиЕдиницыИзмерения.Вес КАК Вес,
		|	УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения КАК ВесЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.Высота КАК Высота,
		|	УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения КАК ВысотаЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.Глубина КАК Глубина,
		|	УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения КАК ГлубинаЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.ЛинейныеРазмерыПредставление КАК ЛинейныеРазмерыПредставление,
		|	УпаковкиЕдиницыИзмерения.Объем КАК Объем,
		|	УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения КАК ОбъемЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.Ширина КАК Ширина,
		|	УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения КАК ШиринаЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок КАК КоличествоУпаковок,
		|	УпаковкиЕдиницыИзмерения.ПоставляетсяВМногооборотнойТаре КАК ПоставляетсяВМногооборотнойТаре,
		|	УпаковкиЕдиницыИзмерения.НоменклатураМногооборотнаяТара КАК НоменклатураМногооборотнаяТара,
		|	УпаковкиЕдиницыИзмерения.ХарактеристикаМногооборотнаяТара КАК ХарактеристикаМногооборотнаяТара,
		|	УпаковкиЕдиницыИзмерения.МинимальноеКоличествоУпаковокМногооборотнойТары КАК МинимальноеКоличествоУпаковокМногооборотнойТары
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ( УпаковкиЕдиницыИзмерения.Владелец ) <> ЗНАЧЕНИЕ(Справочник.Номенклатура)
		|	//И ТИПЗНАЧЕНИЯ( УпаковкиЕдиницыИзмерения.Владелец ) <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Владелец,
		|	Наименование
		|";

	лЗапрос = Новый Запрос(лТекст);

	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		Если ТипЗнч(лВыборка.Владелец)=Тип("СправочникСсылка.НаборыУпаковок") Тогда //Продолжить
			
			Если лВыборка.Владелец.Наименование = "Базовые единицы измерения" Тогда
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекКод = СокрЛП( лВыборка.Код );
		Отбор.Вставить( "Код", ТекКод );
		
		НайденныеСтроки = ТЗ.НайтиСтроки( Отбор );
		Если НайденныеСтроки = Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Пропущен код: " + ТекКод );
			Продолжить;
			
		КонецЕсли; 
		
		Для Каждого Стр Из НайденныеСтроки Цикл
			
			Сравн = СокрЛП( лВыборка.Наименование );
			Если Сравн <> Стр.Наименование Тогда
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ТекКод + ": Наименование: " + Сравн + " <> " + Стр.Наименование );
			КонецЕсли;
			
			Сравн = СокрЛП( лВыборка.НаименованиеПолное );
			Если Сравн <> Стр.НаименованиеПолное Тогда
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ТекКод + ": НаименованиеПолное: " + Сравн + " <> " + Стр.НаименованиеПолное );
			КонецЕсли;
			
			Сравн = СокрЛП( лВыборка.МеждународноеСокращение );
			Если Сравн <> Стр.МеждународноеСокращение Тогда
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ТекКод + ": МеждународноеСокращение: " + Сравн + " <> " + Стр.МеждународноеСокращение );
			КонецЕсли;
			
			Сравн = СокрЛП( лВыборка.ТипИзмеряемойВеличины );
			Если Сравн <> Стр.ТипИзмеряемойВеличины Тогда
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ТекКод + ": ТипИзмеряемойВеличины: " + Сравн + " <> " + Стр.ТипИзмеряемойВеличины );
			КонецЕсли;
			
			Сравн = Формат(лВыборка.Числитель, "ЧГ=0"); 
			Если Сравн <> Стр.Числитель Тогда
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ТекКод + ": Числитель: " + Сравн + " <> " + Стр.Числитель );
			КонецЕсли;
			
			Сравн = Формат(лВыборка.Знаменатель, "ЧГ=0"); 
			Если Сравн <> Стр.Знаменатель Тогда
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю( ТекКод + ": Знаменатель: " + Сравн + " <> " + Стр.Знаменатель );
			КонецЕсли;
			
			Если ТекКод = "163" Тогда
				
				ЕдиницаОб = лВыборка.Ссылка.ПолучитьОбъект();
				ЕдиницаОб.МеждународноеСокращение = Стр.МеждународноеСокращение;
				ЕдиницаОб.Числитель	  = Число(Стр.Числитель);
				ЕдиницаОб.Знаменатель = Число(Стр.Знаменатель);
				ЕдиницаОб.ТипИзмеряемойВеличины = ОбщегоНазначенияСерверДобавленный.ПеречислениеПоНаименованию( Перечисления.ТипыИзмеряемыхВеличин, Стр.ТипИзмеряемойВеличины );
				ЕдиницаОб.Записать();
				
			КонецЕсли;
			Если ТекКод = "715" Тогда
				
				ЕдиницаОб = лВыборка.Ссылка.ПолучитьОбъект();
				ЕдиницаОб.МеждународноеСокращение = Стр.МеждународноеСокращение;
				ЕдиницаОб.Записать();
				
			КонецЕсли;
			Если ТекКод = "778" Тогда
				
				ЕдиницаОб = лВыборка.Ссылка.ПолучитьОбъект();
				ЕдиницаОб.МеждународноеСокращение = Стр.МеждународноеСокращение;
				ЕдиницаОб.Записать();
				
			КонецЕсли;
			Если ТекКод = "168" Тогда
				
				ЕдиницаОб = лВыборка.Ссылка.ПолучитьОбъект();
				ЕдиницаОб.НаименованиеПолное = Стр.НаименованиеПолное;
				ЕдиницаОб.ТипИзмеряемойВеличины = ОбщегоНазначенияСерверДобавленный.ПеречислениеПоНаименованию( Перечисления.ТипыИзмеряемыхВеличин, Стр.ТипИзмеряемойВеличины );
				ЕдиницаОб.Записать();
				
			КонецЕсли;
			Если ТекКод = "359" Тогда
				
				ЕдиницаОб = лВыборка.Ссылка.ПолучитьОбъект();
				ЕдиницаОб.Наименование = Стр.Наименование;
				ЕдиницаОб.МеждународноеСокращение = Стр.МеждународноеСокращение;
				ЕдиницаОб.Числитель	  = Число(Стр.Числитель);
				ЕдиницаОб.Знаменатель = Число(Стр.Знаменатель);
				ЕдиницаОб.ТипИзмеряемойВеличины = ОбщегоНазначенияСерверДобавленный.ПеречислениеПоНаименованию( Перечисления.ТипыИзмеряемыхВеличин, Стр.ТипИзмеряемойВеличины );
				ЕдиницаОб.Записать();
				
			КонецЕсли;
			
			Если Найти( "/003/004/", "/" + ТекКод + "/" ) <> 0 Тогда
				
				ЕдиницаОб = лВыборка.Ссылка.ПолучитьОбъект();
				ЕдиницаОб.ТипИзмеряемойВеличины = ОбщегоНазначенияСерверДобавленный.ПеречислениеПоНаименованию( Перечисления.ТипыИзмеряемыхВеличин, Стр.ТипИзмеряемойВеличины );
				ЕдиницаОб.МеждународноеСокращение = Стр.МеждународноеСокращение;
				ЕдиницаОб.Числитель	  = Число(Стр.Числитель);
				ЕдиницаОб.Знаменатель = Число(Стр.Знаменатель);
				ЕдиницаОб.Записать();
				
			КонецЕсли;
			
			
			Если Найти( "/166/006/055/113/", "/" + ТекКод + "/" ) <> 0 Тогда
				
				ЕдиницаОб = лВыборка.Ссылка.ПолучитьОбъект();
				ЕдиницаОб.ТипИзмеряемойВеличины = ОбщегоНазначенияСерверДобавленный.ПеречислениеПоНаименованию( Перечисления.ТипыИзмеряемыхВеличин, Стр.ТипИзмеряемойВеличины );
				ЕдиницаОб.Записать();
				
			КонецЕсли;
			
			Прервать;
		
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтениеЕдИзм(Команда)
	
	МассивСтрок = Новый Массив;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать( ИмяФайлаВыгрузки( "ЕдИзм.txt" ) );
	Для НомерСтроки = 1 по Текст.КоличествоСтрок() Цикл
		
		Стр = Текст.ПолучитьСтроку(НомерСтроки);
		МассивСтрок.Добавить( Стр ); 
		
	КонецЦикла;   	
	
	ЧтениеЕдИзмСервере( МассивСтрок );
	
КонецПроцедуры



Процедура ЕдИзмЗаполнитьКоэффициентНаСервере()
	
	лТекст = "
		|ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
		|	УпаковкиЕдиницыИзмерения.Владелец КАК Владелец,
		|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.Наименование КАК Наименование,
		|	УпаковкиЕдиницыИзмерения.Числитель КАК Числитель
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|//ГДЕ
		|//	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.Код = &Код
		|//	И УпаковкиЕдиницыИзмерения.Числитель = &Числитель
		|//	И УпаковкиЕдиницыИзмерения.Знаменатель = &Знаменатель
		|
		|УПОРЯДОЧИТЬ ПО
		|	УпаковкиЕдиницыИзмерения.Наименование
		|";

	лЗапрос = Новый Запрос(лТекст);

	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено( лВыборка.ЕдиницаИзмерения ) Тогда
			
			Если ТипЗнч( лВыборка.Владелец ) = Тип( "СправочникСсылка.Номенклатура" ) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "" + лВыборка.Владелец + ": Не указана единица измерения", лВыборка.Владелец  );
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ТипЗнч( лВыборка.Владелец ) <> Тип( "СправочникСсылка.Номенклатура" ) Тогда //Продолжить
			Продолжить;
		КонецЕсли;
		Если лВыборка.Числитель <> 1 Тогда //Продолжить
			
			Продолжить;
			
		КонецЕсли;
		
Если лВыборка.Наименование = "шт (1 шт)" Тогда //исправим наименование
	
	ЕдиницаОбъект = лВыборка.Ссылка.ПолучитьОбъект();
	ЕдиницаОбъект.Наименование = "шт";
	ЕдиницаОбъект.Записать();
	
КонецЕсли;
Если лВыборка.Наименование = "пар (1 пар)" Тогда //исправим наименование
	
	ЕдиницаОбъект = лВыборка.Ссылка.ПолучитьОбъект();
	ЕдиницаОбъект.Наименование = "пар";
	ЕдиницаОбъект.Записать();
	
КонецЕсли;
Если лВыборка.Наименование = "кор (1 кор)" Тогда //исправим наименование
	
	ЕдиницаОбъект = лВыборка.Ссылка.ПолучитьОбъект();
	ЕдиницаОбъект.Наименование = "кор";
	ЕдиницаОбъект.Записать();
	
КонецЕсли;
Если лВыборка.Наименование = "упак (1 упак)" Тогда //исправим наименование
	
	ЕдиницаОбъект = лВыборка.Ссылка.ПолучитьОбъект();
	ЕдиницаОбъект.Наименование = "упак";
	ЕдиницаОбъект.Записать();
	
КонецЕсли;
		
		Наим = лВыборка.Наименование;
		Поз = СтрНайти( Наим, " (" );
		Если Поз = 0 Тогда //Продолжить
			
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "" + лВыборка.Владелец + ": Непонятное название единицы: " + Наим + " (нет пробела с откр.скобкой)", лВыборка.Владелец  );
			Продолжить;
			
		КонецЕсли;
		
		Колво = Прав( Наим, СтрДлина( Наим ) - Поз - 1 );
		Поз   = СтрНайти( Колво, " " );
		Если Поз = 0 Тогда //Продолжить
			
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "" + лВыборка.Владелец + ": Непонятное название единицы: " + Наим + " (нет пробела после числа)", лВыборка.Владелец  );
			Продолжить;
			
		КонецЕсли;
		Колво = Лев( Колво, Поз - 1 );
		Колво = Число( Колво );
		Если Колво = лВыборка.Числитель Тогда //Продолжить
			Продолжить;
		КонецЕсли;
		
		ЕдиницаОбъект = лВыборка.Ссылка.ПолучитьОбъект();
		ЕдиницаОбъект.Числитель = Колво;
		Если лВыборка.Наименование = "кор (1 кор)" Тогда //исправим наименование
			ЕдиницаОбъект.Наименование = "кор";
		КонецЕсли;
		Если лВыборка.Наименование = "пар (1 пар)" Тогда //исправим наименование
			ЕдиницаОбъект.Наименование = "пар";
		КонецЕсли;
		Если лВыборка.Наименование = "шт (1 шт)" Тогда //исправим наименование
			ЕдиницаОбъект.Наименование = "шт";
		КонецЕсли;
		Если лВыборка.Наименование = "упак (1 упак)" Тогда //исправим наименование
			ЕдиницаОбъект.Наименование = "упак";
		КонецЕсли;
		
		
		ЕдиницаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдИзмЗаполнитьКоэффициент(Команда)
	ЕдИзмЗаполнитьКоэффициентНаСервере();
КонецПроцедуры

#КонецОбласти

#Область Версии

Процедура ВерсииЗаписатьНаСервере( ИмяФайла )
	
	Файл = Новый ЗаписьТекста( ИмяФайла );
	Файл.ЗаписатьСтроку( "ТипОбъекта;Вариант;СрокХраненияВерсий" );
	
	лТекст = "
		|ВЫБРАТЬ
		|	НастройкиВерсионированияОбъектов.ТипОбъекта КАК ТипОбъекта,
		|	НастройкиВерсионированияОбъектов.Вариант КАК Вариант,
		|	НастройкиВерсионированияОбъектов.СрокХраненияВерсий КАК СрокХраненияВерсий
		|ИЗ
		|	РегистрСведений.НастройкиВерсионированияОбъектов КАК НастройкиВерсионированияОбъектов
		|ГДЕ
		|	НастройкиВерсионированияОбъектов.Использовать = Истина
		|
		|УПОРЯДОЧИТЬ ПО
		|	НастройкиВерсионированияОбъектов.ТипОбъекта.Наименование
		|";
	
	лЗапрос = Новый Запрос(лТекст);
	
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		Стр = "" + лВыборка.ТипОбъекта + ";" + лВыборка.Вариант + ";" + лВыборка.СрокХраненияВерсий;
		
		Файл.ЗаписатьСтроку( Стр );
		
	КонецЦикла;
	
	Файл.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсииЗаписать(Команда)
	ВерсииЗаписатьНаСервере( ИмяФайлаВыгрузки( "Версии.txt" ) );
КонецПроцедуры



Процедура ВерсииЧтениеНаСервере( ИмяФайла )
	
	НаборЗаписей = РегистрыСведений.НастройкиВерсионированияОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(); //предварительно очистим
	НаборЗаписей = РегистрыСведений.НастройкиВерсионированияОбъектов.СоздатьНаборЗаписей();
	
	ТЗ = ОбщегоНазначенияСерверДобавленный.ПрочитатьФайлCSV( ИмяФайла );
	Для Каждого Стр Из ТЗ Цикл
		
		Вариант = Стр.Вариант;
		Вариант = ?( Вариант = "Версионировать при записи", "При записи", Вариант );
		Вариант = ОбщегоНазначенияСерверДобавленный.ПеречислениеПоНаименованию( Перечисления.ВариантыВерсионированияОбъектов, Вариант );
		Если Не ЗначениеЗаполнено( Вариант ) Тогда //Продолжить
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не найден вариант: " + Стр.Вариант );
			
			Продолжить;
			
		КонецЕсли;
		
		ТипОбъекта = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию( Стр.ТипОбъекта );
		Если Не ЗначениеЗаполнено( ТипОбъекта ) Тогда //Продолжить
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не найден тип объекта: " + Стр.ТипОбъекта );
			
			Продолжить;
			
		КонецЕсли;
		Если СтрНайти( ТипОбъекта.Имя, "?" ) = 1 Тогда //Продолжить
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Пропущен устаревший тип объекта: " + ТипОбъекта.Имя );
			
			Продолжить;
			
		КонецЕсли;
		
		СрокХраненияВерсий  = ОбщегоНазначенияСерверДобавленный.ПеречислениеПоНаименованию( Перечисления.СрокиХраненияВерсий, Стр.СрокХраненияВерсий );
		Если Не ЗначениеЗаполнено( СрокХраненияВерсий ) Тогда //Продолжить
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не найден СрокХраненияВерсий: " + Стр.СрокХраненияВерсий );
			
			Продолжить;
			
		КонецЕсли;
		
		
		НоваяЗапись = НаборЗаписей.Добавить(); 
		
		НоваяЗапись.ТипОбъекта		   = ТипОбъекта;
		НоваяЗапись.Вариант			   = Вариант;
		НоваяЗапись.Использовать	   = Истина;
		НоваяЗапись.СрокХраненияВерсий = СрокХраненияВерсий;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(); 	
	
	//Файл = Новый ЧтениеТекста( ИмяФайла );
	//
	//Стр = Файл.ПрочитатьСтроку();
	//Пока Стр <> Неопределено Цикл
	//	
	//	ТипОбъекта		   = Неопределено;
	//	
	//	МассивСтр = СтрРазделить( Стр, ";", Ложь );
	//	
	//	Вариант = МассивСтр[1];
	//	Вариант = ?( Вариант = "Версионировать при записи", "При записи", Вариант );
	//	Вариант = ОбщегоНазначенияСерверДобавленный.ПеречислениеПоНаименованию( Перечисления.ВариантыВерсионированияОбъектов, Вариант );
	//	
	//	
	//	ТипОбъекта			= Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию( МассивСтр[0] );
	//	СрокХраненияВерсий  = ОбщегоНазначенияСерверДобавленный.ПеречислениеПоНаименованию( Перечисления.СрокиХраненияВерсий, МассивСтр[2] );
	//	
	//	Если Не ЗначениеЗаполнено( ТипОбъекта ) Тогда //Продолжить
	//		
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не найден тип объекта: " + МассивСтр[0] );
	//		
	//		Стр = Файл.ПрочитатьСтроку();
	//		Продолжить;
	//		
	//	КонецЕсли;
	//	Если СтрНайти( ТипОбъекта.Имя, "?" ) = 1 Тогда //Продолжить
	//		
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Пропущен устаревший тип объекта: " + ТипОбъекта.Имя );
	//		
	//		Стр = Файл.ПрочитатьСтроку();
	//		Продолжить;
	//		
	//	КонецЕсли;
	//	Если Не ЗначениеЗаполнено( Вариант ) Тогда //Продолжить
	//		
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не найден вариант: " + МассивСтр[1] );
	//		
	//		Стр = Файл.ПрочитатьСтроку();
	//		Продолжить;
	//		
	//	КонецЕсли;
	//	Если Не ЗначениеЗаполнено( СрокХраненияВерсий ) Тогда //Продолжить
	//		
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Не найден СрокХраненияВерсий: " + МассивСтр[2] );
	//		
	//		Стр = Файл.ПрочитатьСтроку();
	//		Продолжить;
	//		
	//	КонецЕсли;
	//	
	//	
	//	НоваяЗапись = НаборЗаписей.Добавить(); 
	//	
	//	НоваяЗапись.ТипОбъекта		   = ТипОбъекта;
	//	НоваяЗапись.Вариант			   = Вариант;
	//	НоваяЗапись.Использовать	   = Истина;
	//	НоваяЗапись.СрокХраненияВерсий = СрокХраненияВерсий;
	//	
	//	Стр = Файл.ПрочитатьСтроку();
	//	
	//КонецЦикла;
	//
	//НаборЗаписей.Записать(); 	
	//
	//Файл.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсииЧтение(Команда)
	
	ВерсииЧтениеНаСервере( ИмяФайлаВыгрузки( "Версии.txt" ) );
	
	ОткрытьФорму( "РегистрСведений.НастройкиВерсионированияОбъектов.Форма.НастройкиХраненияИстории",, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор );
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуры

Функция   СоздатьГруппуСегментов( Наим, Родитель = Неопределено, СпрСегменты )
	
    Группа = СпрСегменты.СоздатьГруппу();
 	Группа.Наименование = Наим;
	Группа.Родитель = Родитель;
	
    Попытка
	
        Группа.Записать();
        Возврат Группа.Ссылка;
		
    Исключение
        Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция   СоздатьСегмент( Наим, Родитель = Неопределено, Формирование = Неопределено, СпрСегменты, МакетСегмента )
	
	Если Формирование = Неопределено Тогда
		Формирование = Перечисления.СпособыФормированияСегментов.ФормироватьВручную;
	КонецЕсли;
	
    Элем = СпрСегменты.СоздатьЭлемент();
 	Элем.Наименование = Наим;
	Элем.Родитель	  = Родитель;
	Элем.СпособФормирования	   = Формирование;
	Элем.ИмяШаблонаСКД		   = МакетСегмента.Имя;
	Элем.СхемаКомпоновкиДанных = МакетСегмента;
	
    Попытка
	
        Элем.Записать();
        Возврат Элем.Ссылка;
		
    Исключение
        Возврат Неопределено;
	КонецПопытки;
	
КонецФункции


Процедура ПереносПользователейВГруппу( ИмяГруппыПользователей, Пользователи )
// Пользователи - может быть Массив или строка с разделителем |

	Если ТипЗнч( Пользователи ) = Тип( "Строка" ) Тогда
		
		МассивСтрок = СтрРазделить( Пользователи, "|", Ложь );
		
		Пользователи = Новый Массив;
		Для Каждого Стр Из МассивСтрок Цикл
			
			Ссылка = Справочники.Пользователи.НайтиПоНаименованию( Стр, Истина );
			Пользователи.Добавить( Ссылка );
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущаяГруппаПользователей = Справочники.ГруппыПользователей.ПустаяСсылка();
	НоваяГруппаПользователей   = Справочники.ГруппыПользователей.НайтиПоНаименованию( ИмяГруппыПользователей, Истина );
	
	СообщениеПользователю = ПользователиСлужебный.ПеремещениеПользователяВНовуюГруппу( Пользователи, ТекущаяГруппаПользователей, НоваяГруппаПользователей, Ложь );
	
КонецПроцедуры

Функция   СоздатьДопРекв( Наим, ТипЗначПВХ, НаборДопРекв, Заголовок = "", Комментарий = "", Подсказка = "", ЭтоДополнительноеСведение = Ложь )
	
	Если Не ЗначениеЗаполнено( Заголовок ) Тогда
		Заголовок = Наим;
	КонецЕсли;
	
	ЭлемПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	
	//ЭлемПВХ.Имя			 = Наим;
	ЭлемПВХ.Наименование = Наим + " (" + НаборДопРекв + ")";
	ЭлемПВХ.НаборСвойств = НаборДопРекв;
	ЭлемПВХ.ТипЗначения  = ТипЗначПВХ;
	ЭлемПВХ.Заголовок    = Заголовок;
	ЭлемПВХ.Комментарий  = Комментарий;
	ЭлемПВХ.Подсказка	 = Подсказка;
	ЭлемПВХ.Виден		 = Истина;
	ЭлемПВХ.Доступен	 = Истина;
	ЭлемПВХ.ЭтоДополнительноеСведение = ЭтоДополнительноеСведение;
	
	ЭлемПВХ.Записать();
	
	// созданный элемент надо внести в ТабЧасть соответсвующего справочника НаборыДополнительныхРеквизитовИСведений 
	НаборОбъект = НаборДопРекв.ПолучитьОбъект();
	Если ЭтоДополнительноеСведение Тогда
		ТаблицаДобавления = НаборОбъект.ДополнительныеСведения;
	Иначе
		ТаблицаДобавления = НаборОбъект.ДополнительныеРеквизиты;
	КонецЕсли;
	
	НовСтр = ТаблицаДобавления.Добавить();
	НовСтр.Свойство = ЭлемПВХ.Ссылка;
	
	НаборОбъект.Записать();
	
КонецФункции



Функция	  ИмяФайлаОбработкиНаСервере()
	Возврат РеквизитФормыВЗначение( "Отчет" ).ИспользуемоеИмяФайла;
КонецФункции

&НаКлиенте
Функция	  ИмяФайлаВыгрузки( ИмяФайлаЗагрузки = "" )
	
	ИмяФайла = ИмяФайлаОбработкиНаСервере();
	Файл	 = Новый Файл( ИмяФайла );
	
	Возврат Файл.Путь + ИмяФайлаЗагрузки;
	
КонецФункции



//ВЗЯТО из ПолучениеОбновленийПрограммыКлиент для отключения обновления
&НаКлиенте
Функция ГлобальныеНастройкиОбновления()
	
	НастройкиОбновления = ИнтернетПоддержкаПользователейКлиент.ЗначениеПараметраПриложения(
		"ПолучениеОбновленийПрограммы\НастройкиОбновления");
	Если НастройкиОбновления = Неопределено Тогда
		НастройкиОбновления = ПолучениеОбновленийПрограммыВызовСервера.НастройкиОбновления();
		ИнтернетПоддержкаПользователейКлиент.УстановитьЗначениеПараметраПриложения(
			"ПолучениеОбновленийПрограммы\НастройкиОбновления", НастройкиОбновления);
	КонецЕсли;
	
	Возврат НастройкиОбновления;
	
КонецФункции

//ВЗЯТО из ОбщаяФорма.ФормаНастройкиОрганизации для создания услуги
&НаСервереБезКонтекста
Функция ПолучитьПредустановленныеВидыНоменклатуры(ТипНоменклатуры, Имя)
	
	МассивВидов = Новый Массив();
	
	Справочники.ВидыНоменклатуры.ДобавитьПредустановленныйВидНоменклатуры(МассивВидов, ТипНоменклатуры, Имя);
	
	Если МассивВидов.Количество() > 0 Тогда
		Возврат МассивВидов[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции 

#КонецОбласти


Процедура Я_ТестНаСервере()
	//ТУТ БУДЕТ ЧТОТО
	//Первая правка!	
	//Вторая правка
КонецПроцедуры

&НаКлиенте
Процедура Я_Тест(Команда)
	
	Я_ТестНаСервере();
	
КонецПроцедуры
